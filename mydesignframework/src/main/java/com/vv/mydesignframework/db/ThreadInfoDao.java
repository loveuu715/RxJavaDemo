package com.vv.mydesignframework.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "THREAD_INFO".
*/
public class ThreadInfoDao extends AbstractDao<ThreadInfo, Long> {

    public static final String TABLENAME = "THREAD_INFO";

    /**
     * Properties of entity ThreadInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Finished = new Property(2, long.class, "finished", false, "FINISHED");
        public final static Property Status = new Property(3, int.class, "status", false, "STATUS");
        public final static Property Size = new Property(4, long.class, "size", false, "SIZE");
    };


    public ThreadInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ThreadInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"THREAD_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"FINISHED\" INTEGER NOT NULL ," + // 2: finished
                "\"STATUS\" INTEGER NOT NULL ," + // 3: status
                "\"SIZE\" INTEGER NOT NULL );"); // 4: size
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"THREAD_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ThreadInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
        stmt.bindLong(3, entity.getFinished());
        stmt.bindLong(4, entity.getStatus());
        stmt.bindLong(5, entity.getSize());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ThreadInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
        stmt.bindLong(3, entity.getFinished());
        stmt.bindLong(4, entity.getStatus());
        stmt.bindLong(5, entity.getSize());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ThreadInfo readEntity(Cursor cursor, int offset) {
        ThreadInfo entity = new ThreadInfo( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.getLong(offset + 2), // finished
            cursor.getInt(offset + 3), // status
            cursor.getLong(offset + 4) // size
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ThreadInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFinished(cursor.getLong(offset + 2));
        entity.setStatus(cursor.getInt(offset + 3));
        entity.setSize(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ThreadInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ThreadInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
